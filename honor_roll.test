<?php

/**
 * Tests the functionality of the Simpletest example content type.
 *
 * Command to run tests: php run-tests.sh --verbose --color --class SimpletestHonorRollTestCase.
 */
class SimpletestHonorRollTestCase extends DrupalWebTestCase {
  protected $privilegedUser;

  /**
   * Describe the test for this module.
   *
   * @return array
   *   Set up the desctiption and name for the tests.
   */
  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'Honor Roll Test',
      'description' => 'Ensure that the Honor Roll Module is functioning like it should.',
      'group' => 'Module',
    );
  }

  /**
   * Set up the user and give them all the permisions.
   */
  public function setUp() {

    // Enable any modules required for the test. This should be an array of module names.
    parent::setUp(array('honor_roll'));

    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);

    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser($perms);

    $this->drupalLogin($this->privilegedUser);

    // Print the user array.
    /* $this->pass(var_export($this->privilegedUser, TRUE)); */

  }

  /**
   * Create user with specific role.
   *
   * @param string $role
   *   The name of the roll we what the user to be created with.
   *
   * @return object
   *   The created user object is returned.
   */
  public function drupalCreateUserWithRole($role) {
    // Get all of the roles in the system.
    $roles = user_roles();

    // Find the index for the role we want to assign to the user.
    $index = array_search($role, $roles);

    // Get the permissions for the role.
    $permissions = user_role_permissions(array(array_search($role, $roles) => $role));

    // Create the user with the permissions.
    $user = $this->drupalCreateUser(array_keys($permissions[$index]));

    // Assign the role.
    $user->roles[$index] = $role;

    // Return the user we have created.
    return user_save($user);
  }

  /**
   * Tests the settings input.
   */
  public function testConfigurationFormCreate() {

    // Print the user array.
    /* $this->pass(var_export($this->privilegedUser, TRUE)); */

    $edit = array(
      'honor_roll_undergraduate_csv_file_path' => $this->randomName(8),
      'honor_roll_graduate_csv_file_path' => $this->randomName(16)
    );

    $this->drupalPost(
      'admin/settings/honor_roll',
      $edit,
      'Save configuration'
    );

    // It this the access denied page?
    $this->assertNoText('Access denied', "Did not get the Access Denied page.", 'Other');

    // It the form actually showing.
    $this->assertText('The file path to the CSV file containing the graduate honor roll data.', "The correct html page is showing.", 'Other');

    // Check if the configurations have saved by looking for the saved text.
    $this->assertText('The configuration options have been saved.', "The configuration options have been saved text is visable.", 'browser');

    // Did the entered data show in the field after saving?
    $this->assertFieldById('edit-honor-roll-graduate-csv-file-path', $edit['honor_roll_graduate_csv_file_path'], "The graduate field was detected and contains the correct value", 'browser');

    // Did the entered data show in the field after saving?
    $this->assertFieldById('edit-honor-roll-undergraduate-csv-file-path', $edit['honor_roll_undergraduate_csv_file_path'], "The undergraduate field was detected and contains the correct value.", 'browser');
  }

}
